// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auctions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAuction = `-- name: AddAuction :one
insert into auctions
(seller_id, product_name, product_desc, auc_mode, auc_status, starting_price, target_price)
values
($1, $2, $3, $4, $5, $6, $7)
RETURNING id, product_name, product_desc, auc_mode, auc_status, starting_price, target_price, seller_id
`

type AddAuctionParams struct {
	SellerID      pgtype.UUID   `json:"seller_id"`
	ProductName   string        `json:"product_name"`
	ProductDesc   string        `json:"product_desc"`
	AucMode       AuctionMode   `json:"auc_mode"`
	AucStatus     AuctionStatus `json:"auc_status"`
	StartingPrice float32       `json:"starting_price"`
	TargetPrice   pgtype.Float4 `json:"target_price"`
}

func (q *Queries) AddAuction(ctx context.Context, arg AddAuctionParams) (Auction, error) {
	row := q.db.QueryRow(ctx, addAuction,
		arg.SellerID,
		arg.ProductName,
		arg.ProductDesc,
		arg.AucMode,
		arg.AucStatus,
		arg.StartingPrice,
		arg.TargetPrice,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDesc,
		&i.AucMode,
		&i.AucStatus,
		&i.StartingPrice,
		&i.TargetPrice,
		&i.SellerID,
	)
	return i, err
}

const getAllAuctionsByUser = `-- name: GetAllAuctionsByUser :many
SELECT id, product_name, product_desc, auc_mode, auc_status, starting_price, target_price, seller_id, seller_name, seller_email FROM auction_details 
WHERE seller_id = $1
`

func (q *Queries) GetAllAuctionsByUser(ctx context.Context, sellerID pgtype.UUID) ([]AuctionDetail, error) {
	rows, err := q.db.Query(ctx, getAllAuctionsByUser, sellerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuctionDetail{}
	for rows.Next() {
		var i AuctionDetail
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.ProductDesc,
			&i.AucMode,
			&i.AucStatus,
			&i.StartingPrice,
			&i.TargetPrice,
			&i.SellerID,
			&i.SellerName,
			&i.SellerEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAuctionByName = `-- name: GetAuctionByName :one
SELECT id, product_name, product_desc, auc_mode, auc_status, starting_price, target_price, seller_id, seller_name, seller_email FROM auction_details
WHERE product_name = $1 LIMIT 1
`

func (q *Queries) GetAuctionByName(ctx context.Context, productName string) (AuctionDetail, error) {
	row := q.db.QueryRow(ctx, getAuctionByName, productName)
	var i AuctionDetail
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductDesc,
		&i.AucMode,
		&i.AucStatus,
		&i.StartingPrice,
		&i.TargetPrice,
		&i.SellerID,
		&i.SellerName,
		&i.SellerEmail,
	)
	return i, err
}

const getAuctions = `-- name: GetAuctions :many
SELECT id, product_name, product_desc, auc_mode, auc_status, starting_price, target_price, seller_id, seller_name, seller_email FROM auction_details
`

func (q *Queries) GetAuctions(ctx context.Context) ([]AuctionDetail, error) {
	rows, err := q.db.Query(ctx, getAuctions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuctionDetail{}
	for rows.Next() {
		var i AuctionDetail
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.ProductDesc,
			&i.AucMode,
			&i.AucStatus,
			&i.StartingPrice,
			&i.TargetPrice,
			&i.SellerID,
			&i.SellerName,
			&i.SellerEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
