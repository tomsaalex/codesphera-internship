// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products 
(name, description, price)
VALUES
($1, $2, $3)
RETURNING name, description, price, issold
`

type CreateProductParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Description, arg.Price)
	var i Product
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Issold,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE name = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteProduct, name)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT name, description, price, issold FROM products
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, name)
	var i Product
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Issold,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT name, description, price, issold FROM products
ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Issold,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
	set description = $2,
	price = $3,
	issold=$4
WHERE name = $1
RETURNING name, description, price, issold
`

type UpdateProductParams struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Issold      bool    `json:"issold"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Issold,
	)
	var i Product
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Issold,
	)
	return i, err
}
